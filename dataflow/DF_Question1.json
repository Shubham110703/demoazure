{
	"name": "DF_Question1",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "staging_CustomerTable",
						"type": "DatasetReference"
					},
					"name": "CustomerTable"
				},
				{
					"dataset": {
						"referenceName": "prep_CustomerTable",
						"type": "DatasetReference"
					},
					"name": "Customer"
				},
				{
					"dataset": {
						"referenceName": "prep_OrderTable",
						"type": "DatasetReference"
					},
					"name": "Order"
				},
				{
					"dataset": {
						"referenceName": "staging_OrderTable",
						"type": "DatasetReference"
					},
					"name": "OrdersTable"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "prep_CustomerTable",
						"type": "DatasetReference"
					},
					"name": "Sink1"
				},
				{
					"dataset": {
						"referenceName": "prep_OrderTable",
						"type": "DatasetReference"
					},
					"name": "Sink3"
				},
				{
					"dataset": {
						"referenceName": "reportFinal",
						"type": "DatasetReference"
					},
					"name": "Sink2"
				}
			],
			"transformations": [
				{
					"name": "select1"
				},
				{
					"name": "aggregate1"
				},
				{
					"name": "join1"
				},
				{
					"name": "sort1"
				},
				{
					"name": "filter1"
				},
				{
					"name": "select2"
				},
				{
					"name": "aggregate2"
				},
				{
					"name": "aggregate3"
				}
			],
			"scriptLines": [
				"source(output(",
				"          CustomerID as string,",
				"          FirstName as string,",
				"          LastName as string,",
				"          Email as string,",
				"          PhoneNumber as string,",
				"          Address as string,",
				"          City as string,",
				"          State as string,",
				"          ZipCode as string,",
				"          Country as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> CustomerTable",
				"source(output(",
				"          CustomerID as string,",
				"          FirstName as string,",
				"          LastName as string,",
				"          Email as string,",
				"          PhoneNumber as string,",
				"          Address as string,",
				"          City as string,",
				"          State as string,",
				"          Country as string,",
				"          ZipCode as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> Customer",
				"source(output(",
				"          OrderID as string,",
				"          ProductID as string,",
				"          ProductName as string,",
				"          Quantity as string,",
				"          Price as string,",
				"          CustomerID as string,",
				"          OrderTimestamp as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> Order",
				"source(output(",
				"          OrderID as string,",
				"          ProductID as string,",
				"          ProductName as string,",
				"          Quantity as string,",
				"          OrderTimestamp as string,",
				"          Price as string,",
				"          CustomerID as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> OrdersTable",
				"CustomerTable select(skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"filter1 aggregate(groupBy(CustomerID,",
				"          FirstName,",
				"          LastName,",
				"          Email,",
				"          PhoneNumber,",
				"          Address,",
				"          City,",
				"          State,",
				"          Country),",
				"     ZipCode = max(ZipCode)) ~> aggregate1",
				"Customer, Order join(Customer@CustomerID == Order@CustomerID,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"aggregate1 sort(asc(CustomerID, true)) ~> sort1",
				"select1 filter((CustomerID != \"19\" && ZipCode != \"NULL\") || (Email != \"NULL\" && FirstName != \"NULL\" && LastName != \"NULL\" && CustomerID != \"NULL\" )) ~> filter1",
				"OrdersTable select(skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select2",
				"select2 aggregate(groupBy(OrderID,",
				"          ProductID,",
				"          ProductName,",
				"          Quantity,",
				"          Price,",
				"          CustomerID),",
				"     OrderTimestamp = max(OrderTimestamp)) ~> aggregate2",
				"join1 aggregate(groupBy(Customer@CustomerID,",
				"          FirstName,",
				"          LastName,",
				"          Email,",
				"          OrderID,",
				"          ProductID,",
				"          ProductName,",
				"          Quantity,",
				"          Price),",
				"     ZipCode = max(ZipCode),",
				"          OrderTimestamp = max(OrderTimestamp)) ~> aggregate3",
				"sort1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     recreate:true,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> Sink1",
				"aggregate2 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     recreate:true,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> Sink3",
				"aggregate3 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> Sink2"
			]
		}
	}
}